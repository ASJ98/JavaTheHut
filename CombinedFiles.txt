|-- dbConfig
|   -- dbConfig.js
|-- jsHandlers
|   -- jsHandlers.js
|-- public
|   -- employeeViews.html
|-- routes
|   -- employeeRoutes.js
-- .env
-- app.js
-- employeeViews.html
-- JavaTheHut-2.sql
C:\xampp11\htdocs\javaTheHutt\JavaTheHut\.env:
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_DATABASE=db_kainos

 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\app.js:
require('dotenv').config();
const express = require('express');
const dbModule = require('./dbConfig/dbConfig.js');
const employeeRoutes = require('./routes/employeeRoutes.js');
const path = require('path'); // Use require for path

const app = express();
app.use(express.json());

// Initialize the database connection pool
dbModule.initializeDatabaseConnection();

// Use the employee routes
app.use(employeeRoutes);

// app.js
app.use(express.static(path.join(__dirname, 'public')));
app.use('/jsHandlers', express.static(path.join(__dirname, 'jsHandlers')));


// Start the Express server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
   console.log(`Server is running on port ${PORT}`);
});

 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\employeeViews.html:
<!DOCTYPE html>
<html>
  <head>
    <title>Employee List</title>
    <!-- Bootstrap CSS CDN -->
    <link
    rel="stylesheet"
    href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    crossorigin="anonymous"
  />

    <script>
      // Function to fetch and display employees
      function fetchAndDisplayEmployees(event) {
        event.preventDefault(); // Prevent the default form submission

        fetch("/employees")
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            const table = document.getElementById("employeeTable");
            table.innerHTML = ""; // Clear existing data
            // Create table headers
            let header = table.createTHead();
            let row = header.insertRow(0);
            row.insertCell(0).innerHTML = "<b>First Name</b>";
            row.insertCell(1).innerHTML = "<b>Last Name</b>";
            row.insertCell(2).innerHTML = "<b>Employee Number</b>";
            row.insertCell(3).innerHTML = "<b>Salary</b>";
            row.insertCell(4).innerHTML = "<b>Address</b>";
            // Inserting rows for each employee
            data.forEach((employee) => {
              let row = table.insertRow();
              row.insertCell(0).textContent = employee.employee_first_name;
              row.insertCell(1).textContent = employee.employee_last_name;
              row.insertCell(2).textContent = employee.employee_number;
              row.insertCell(3).textContent = employee.employee_salary;
              row.insertCell(4).textContent = employee.employee_address;
            });
          })
          .catch((error) => {
            console.error("Fetch error:", error);
          });
      }
    </script>
  </head>
  <body>
    <h1>Employee List</h1>

    <!-- Add a form to interact with the /employees route -->
    <form onsubmit="fetchAndDisplayEmployees(event)">
      <button type="submit">Show Employees</button>
    </form>

    <!-- Display the list of employees in a table -->
    <table id="employeeTable">
      <!-- Employee data will be displayed here after the form submission -->
    </table>



    <!-- Optional: Bootstrap Bundle with Popper (only if you need Bootstrap's JavaScript components) -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

    <!-- Popper.js (Required for Bootstrap 4) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>

    <!-- Bootstrap Bundle JavaScript Without Integrity Attribute -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>



  </body>
</html>

 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\JavaTheHut-2.sql:
-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: localhost:8889
-- Generation Time: Jan 25, 2024 at 11:28 AM
-- Server version: 5.7.39
-- PHP Version: 7.4.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `JavaTheHut`
--

-- --------------------------------------------------------

--
-- Table structure for table `employee`
--

CREATE TABLE `employee` (
  `employee_id` int(11) NOT NULL,
  `employee_first_name` varchar(255) NOT NULL,
  `employee_last_name` varchar(255) NOT NULL,
  `employee_number` varchar(255) NOT NULL,
  `employee_salary` decimal(10,2) NOT NULL,
  `employee_address` varchar(255) NOT NULL,
  `employee_role_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `employee`
--

INSERT INTO `employee` (`employee_id`, `employee_first_name`, `employee_last_name`, `employee_number`, `employee_salary`, `employee_address`, `employee_role_id`) VALUES
(1, 'John', 'Smith', '127', '35000.00', '100 Hillhall Road', 3),
(2, 'Rebekah', 'Martin', '45', '47000.00', '14 Cyprus Avenue', 2),
(3, 'Sam', 'Peterson', '78', '80000.00', '45 River Road', 1);

-- --------------------------------------------------------

--
-- Table structure for table `role`
--

CREATE TABLE `role` (
  `role_id` int(11) NOT NULL,
  `role_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `role`
--

INSERT INTO `role` (`role_id`, `role_name`) VALUES
(1, 'Software Developer'),
(2, 'Data Analyst'),
(3, 'Machine Learning Engineer');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `employee`
--
ALTER TABLE `employee`
  ADD PRIMARY KEY (`employee_id`),
  ADD KEY `FK_emplyee_role_employee_role_id_role_id` (`employee_role_id`);

--
-- Indexes for table `role`
--
ALTER TABLE `role`
  ADD PRIMARY KEY (`role_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `employee`
--
ALTER TABLE `employee`
  MODIFY `employee_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `role`
--
ALTER TABLE `role`
  MODIFY `role_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `employee`
--
ALTER TABLE `employee`
  ADD CONSTRAINT `FK_emplyee_role_employee_role_id_role_id` FOREIGN KEY (`employee_role_id`) REFERENCES `role` (`role_id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;

 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\dbConfig\dbConfig.js:
const mysql = require("mysql");
let pool; // 


function initializeDatabaseConnection() {
  if (!pool) {
    const config = {
      connectionLimit: 10,
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_DATABASE,
    };
    pool = mysql.createPool(config);
  }
  return pool;
}

function queryDatabase(query, values) {
  return new Promise((resolve, reject) => {
    pool.query(query, values, (err, results) => {
      if (err) {
        reject(err);
      } else {
        resolve(results);
      }
    });
  });
}




module.exports = {
  queryDatabase,
  initializeDatabaseConnection,

};

 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\jsHandlers\jsHandlers.js:
async function fetchAndDisplayEmployees(event) {
    if (event) event.preventDefault();

    try {
        const response = await fetch("/employees");
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        const data = await response.json();

        const table = document.getElementById("employeeTable");
        table.innerHTML = "";

        let header = table.createTHead();
        let headerRow = header.insertRow(0);
        headerRow.insertCell(0).innerHTML = "<b>First Name</b>";
        headerRow.insertCell(1).innerHTML = "<b>Last Name</b>";
        headerRow.insertCell(2).innerHTML = "<b>Employee Number</b>";
        headerRow.insertCell(3).innerHTML = "<b>Salary</b>";
        headerRow.insertCell(4).innerHTML = "<b>Address</b>";
        headerRow.insertCell(5).innerHTML = "<b>Role</b>"; // Add a header for the role

        data.forEach((employee) => {
            let row = table.insertRow();
            row.insertCell(0).textContent = employee.employee_first_name;
            row.insertCell(1).textContent = employee.employee_last_name;
            row.insertCell(2).textContent = employee.employee_number;
            row.insertCell(3).textContent = employee.employee_salary;
            row.insertCell(4).textContent = employee.employee_address;
            row.insertCell(5).textContent = employee.role_name; // Display the role name
        });
    } catch (error) {
        console.error("Fetch error:", error);
    }
}


async function addEmployee(event) {
    if (event) event.preventDefault();
    const employeeData = {
        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        employeeNumber: document.getElementById('employeeNumber').value,
        employeeSalary: document.getElementById('employeeSalary').value,
        employeeAddress: document.getElementById('employeeAddress').value,
        employeeRoleId: document.getElementById('employeeRoleId').value
    };

    try {
        const response = await fetch('/add-employee', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(employeeData),
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        await fetchAndDisplayEmployees(); // Call without passing an event
    } catch (error) {
        console.error('Error adding employee:', error);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const showEmployeesForm = document.getElementById('showEmployeesForm');
    if (showEmployeesForm) {
        showEmployeesForm.addEventListener('submit', fetchAndDisplayEmployees);
    }

    const addEmployeeForm = document.getElementById('addEmployeeForm');
    if (addEmployeeForm) {
        addEmployeeForm.addEventListener('submit', addEmployee);
    }

    // Any additional code needed...
});
 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\public\employeeViews.html:
<!DOCTYPE html>
<html>
  <head>
    <title>Employee List</title>
    <!-- Bootstrap CSS CDN -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <div class="container mt-4">
      <h1>Employee List</h1>

      <form onsubmit="fetchAndDisplayEmployees(event)" class="mb-3">
        <button type="submit" class="btn btn-primary">Show Employees</button>
      </form>

      <table id="employeeTable" class="table table-bordered"></table>

      <!-- Add this form inside the <div class="container mt-4"> -->
      <form id="addEmployeeForm">
        <input type="text" id="firstName" placeholder="First Name" required />
        <input type="text" id="lastName" placeholder="Last Name" required />
        <input
          type="text"
          id="employeeNumber"
          placeholder="Employee Number"
          required
        />
        <input type="text" id="employeeSalary" placeholder="Salary" required />
        <input
          type="text"
          id="employeeAddress"
          placeholder="Address"
          required
        />
        <select id="employeeRoleId" required>
          <option value="">Select Role</option>
          <option value="1">Software Developer</option>
          <option value="2">Data Analyst</option>
          <option value="3">Machine Learning Engineer</option>
        </select>
        <button type="submit" class="btn btn-success">Add Employee</button>
      </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script src="/jsHandlers/JsHandlers.js"></script>
  </body>
</html>

 C:\xampp11\htdocs\javaTheHutt\JavaTheHut\routes\employeeRoutes.js:
const express = require('express');
const router = express.Router();
const dbModule = require('../dbConfig/dbConfig');

// GET route to fetch employees
router.get('/employees', (req, res) => {
    const query = `
        SELECT employee.*, role.role_name 
        FROM employee 
        JOIN role ON employee.employee_role_id = role.role_id`;

    dbModule.queryDatabase(query, [])
        .then(results => {
            res.json(results);
        })
        .catch(err => {
            console.error('Error querying the database: ' + err.message);
            res.status(500).send('Internal Server Error');
        });
});


// POST route to add a new employee
router.post('/add-employee', (req, res) => {
    const { firstName, lastName, employeeNumber, employeeSalary, employeeAddress, employeeRoleId } = req.body;

    if (!firstName || !lastName || !employeeNumber || !employeeSalary || !employeeAddress || !employeeRoleId) {
        return res.status(400).json({ message: 'Missing required employee fields' });
    }

    const query = `
        INSERT INTO employee 
        (employee_first_name, employee_last_name, employee_number, employee_salary, employee_address, employee_role_id) 
        VALUES (?, ?, ?, ?, ?, ?)`;

    dbModule.queryDatabase(query, [firstName, lastName, employeeNumber, employeeSalary, employeeAddress, employeeRoleId])
        .then(result => {
            res.status(201).json({ message: 'Employee added', id: result.insertId });
        })
        .catch(err => {
            console.error('Error adding employee:', err);
            res.status(500).send('Internal Server Error');
        });
});





module.exports = router;


